Post-login scripting
====================

If you want to do something special after authentication, but before beginning
the IMAP or POP3 session, you can do this by telling imap/pop3 executable to
use post-login service:

---%<-------------------------------------------------------------------------
service imap {
  executable = imap imap-postlogin
}

# The service name below doesn't actually matter.
service imap-postlogin {
  executable = script-login /usr/local/bin/postlogin.sh

  # the script process runs as the user specified here
  user = root
  unix_listener imap-postlogin {
  }
}
---%<-------------------------------------------------------------------------

You can run multiple post-login scripts by just giving multiple scripts as
parameters to 'script-login', for example:

---%<-------------------------------------------------------------------------
  executable = script-login rawlog /usr/local/bin/postlogin.sh
/usr/local/bin/postlogin2.sh
---%<-------------------------------------------------------------------------

Running environment
-------------------

Standard input and output file descriptors are redirected to the client's
network socket, so you can send data to client by simply writing to stdout.
Standard error fd is redirected to Dovecot's error log, you can write errors
there as well.

The script can use environment variables:

 * USER: Username
 * IP: Remote IP address
 * LOCAL_IP: Local IP address
 * Fields returned by userdb lookup with their keys uppercased (e.g. if userdb
   returned home, it's stored in HOME).

It's possible to add/modify userdb fields by adding them to environment and
adding the field to USERDB_KEYS. For example to change user's mail location:

---%<-------------------------------------------------------------------------
export MAIL=maildir:/tmp/test
export USERDB_KEYS="$USERDB_KEYS mail"
exec "$@"
---%<-------------------------------------------------------------------------

You can change any Dovecot settings using the above method.

Last-login tracking
-------------------

If you want to know when the user last logged in, you can do it like this:

---%<-------------------------------------------------------------------------
#!/bin/sh
# a) Filesystem based timestamp in user's home directory
touch ~/.last_login
# b) SQL based tracking. Beware of potential SQL injection holes if you allow
# users to have ' characters in usernames.
#echo "update last_login = now WHERE user = '$USER'" | mysql mails
exec "$@"
---%<-------------------------------------------------------------------------

/Note: if creating a timestamp inside the Maildir itself, it's better to avoid
filenames which begin with a dot. The IMAP "list" command will show such files
as IMAP folders, unless you also set 'maildir_stat_dirs = yes' which generates
more I/O ops./

Custom mailbox location autodetection
-------------------------------------

See <MailLocation.txt> for an example.

Alerts
------

If you want to give the user's client some warning notification, you can do it
just by writing it to stdout. But note:

 * Not all clients show the alerts, even though IMAP RFC requires it.
 * IMAP protocol requires CRLF (\r\n) line feeds. Some clients will break if
   you only send LF.

---%<-------------------------------------------------------------------------
#!/bin/sh
if [ -f ~/.out-of-office ]; then
  printf "* OK [ALERT] You're still marked as being out of office.\r\n"
fi
exec "$@"
---%<-------------------------------------------------------------------------

Use UNIX groups for ACL authorization
-------------------------------------

---%<-------------------------------------------------------------------------
#!/bin/sh
ACL_GROUPS=`groups $USER | tr ' '  ','`
export ACL_GROUPS
exec "$@"
---%<-------------------------------------------------------------------------

Denying connection from some IP/User
------------------------------------

You can use the IP and USER shell variables that are setup by dovecot in a bash
script in order to deny connection (after a successful login), like this:

---%<-------------------------------------------------------------------------
if [ "$USER" = "myuser" ] ; then
  printf "* NO [ALERT] The user '$USER' can not login\r\n"
  exit 0
fi

if [ ! "$IP" = "192.168.1.1" ] ; then
  printf "* NO [ALERT] Access not allowed from the Internet\r\n"
  exit 0
fi
exec "$@"
---%<-------------------------------------------------------------------------

You can also use

 * http://www.linux.org.py/wiki/howto/dovecot_connect_acl
 * TCP wrappers can be used with 'login_access_sockets = tcpwrap'

(This file was created from the wiki on 2010-07-02 21:30)
