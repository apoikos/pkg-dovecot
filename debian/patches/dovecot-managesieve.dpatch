#! /bin/sh -e
## DP: Adds support for ManageSieve
## DP: Author: Stephan Bosch <stephan@rename-it.nl>
## DP: Version: 0.11.9

# Copyright (c) 2006-2009 by Stephan Bosch <stephan@rename-it.nl>
# This patch is licenced under LGPLv2.1

# Patch obtained from http://www.rename-it.nl/dovecot/1.2/dovecot-1.2.4-managesieve-0.11.9.diff.gz

. $(dirname $0)/DPATCH

exit 0
@DPATCH@
Binary files dovecot-1.2.4.orig/dovecot-1.2.4-managesieve-0.11.9.diff.gz and dovecot-1.2.4/dovecot-1.2.4-managesieve-0.11.9.diff.gz differ
diff -urN dovecot-1.2.4.orig/dovecot-example.conf dovecot-1.2.4/dovecot-example.conf
--- dovecot-1.2.4.orig/dovecot-example.conf	2009-08-08 01:46:04.000000000 +0200
+++ dovecot-1.2.4/dovecot-example.conf	2009-08-29 17:20:49.000000000 +0200
@@ -19,7 +19,7 @@
 # Base directory where to store runtime data.
 #base_dir = /var/run/dovecot/
 
-# Protocols we want to be serving: imap imaps pop3 pop3s
+# Protocols we want to be serving: imap imaps pop3 pop3s managesieve
 # If you only want to use dovecot-auth, you can set this to "none".
 #protocols = imap imaps
 
@@ -28,8 +28,8 @@
 # interfaces. Use "*, [::]" for listening both IPv4 and IPv6.
 #
 # If you want to specify ports for each service, you will need to configure
-# these settings inside the protocol imap/pop3 { ... } section, so you can
-# specify different ports for IMAP/POP3. For example:
+# these settings inside the protocol imap/pop3/managesieve { ... } section, 
+# so you can specify different ports for IMAP/POP3/MANAGESIEVE. For example:
 #   protocol imap {
 #     listen = *:10143
 #     ssl_listen = *:10943
@@ -39,6 +39,10 @@
 #     listen = *:10100
 #     ..
 #   }
+#   protocol managesieve {
+#     listen = *:12000
+#     ..
+#   }
 #listen = *
 
 # Disable LOGIN command and all other plaintext authentications unless
@@ -692,6 +696,42 @@
 }
 
 ##
+## ManageSieve specific settings
+##
+
+protocol managesieve {
+  # Login executable location.
+  #login_executable = /usr/lib/dovecot/managesieve-login
+
+  # ManageSieve executable location. See IMAP's mail_executable above for 
+  # examples how this could be changed.
+  #mail_executable = /usr/lib/dovecot/managesieve
+
+  # Maximum ManageSieve command line length in bytes. This setting is 
+  # directly borrowed from IMAP. But, since long command lines are very
+  # unlikely with ManageSieve, changing this will not be very useful.  
+  #managesieve_max_line_length = 65536
+
+  # ManageSieve logout format string:
+  #  %i - total number of bytes read from client
+  #  %o - total number of bytes sent to client
+  #managesieve_logout_format = bytes=%i/%o
+
+  # If, for some inobvious reason, the sieve_storage remains unset, the 
+  # ManageSieve daemon uses the specification of the mail_location to find out 
+  # where to store the sieve files (see explaination in README.managesieve). 
+  # The example below, when uncommented, overrides any global mail_location 
+  # specification and stores all the scripts in '~/mail/sieve' if sieve_storage 
+  # is unset. However, you should always use the sieve_storage setting.
+  # mail_location = mbox:~/mail
+
+  # To fool ManageSieve clients that are focused on timesieved you can
+  # specify the IMPLEMENTATION capability that the dovecot reports to clients 
+  # (default: "dovecot").
+  #managesieve_implementation_string = Cyrus timsieved v2.2.13
+}
+
+##
 ## LDA specific settings
 ##
 
@@ -1207,6 +1247,16 @@
   # Available fields: uid, box, msgid, from, subject, size, vsize, flags
   # size and vsize are available only for expunge and copy events.
   #mail_log_fields = uid box msgid size
+
+  # Sieve plugin (http://wiki.dovecot.org/LDA/Sieve) and ManageSieve service
+  # 
+  # Location of the active script. When ManageSieve is used this is actually 
+  # a symlink pointing to the active script in the sieve storage directory. 
+  #sieve=~/.dovecot.sieve
+  #
+  # The path to the directory where the personal Sieve scripts are stored. For 
+  # ManageSieve this is where the uploaded scripts are stored.
+  #sieve_dir=~/sieve
 }
 
 # Config files can also be included:
diff -urN dovecot-1.2.4.orig/README.managesieve dovecot-1.2.4/README.managesieve
--- dovecot-1.2.4.orig/README.managesieve	1970-01-01 01:00:00.000000000 +0100
+++ dovecot-1.2.4/README.managesieve	2009-08-29 17:20:49.000000000 +0200
@@ -0,0 +1,29 @@
+
+MANAGESIEVE service support patch for Dovecot 1.2
+
+NOTICE: As per dovecot-1.1, this patch only contains the changes to the 
+Dovecot tree that are necessary to use the now external 
+dovecot-1.x-managesieve package. So, applying this patch is no longer 
+the only thing you need to do to give Dovecot managesieve support. 
+Eventually the need for this patch will disappear completely. 
+
+Compile
+-------
+
+After applying this patch you can just use the usual build process
+(http://wiki.dovecot.org/CompilingSource):
+
+./configure
+make
+sudo make install 
+
+Don't forget to execute ./autogen.sh if you downloaded dovecot from the
+Mercurial repository.
+
+Installation and Configuration
+------------------------------
+
+Read the README of the dovecot-managesieve package for the next steps. 
+Note that this patch adds configuration examples to the dovecot-example.conf 
+configuration file example.
+
diff -urN dovecot-1.2.4.orig/src/master/child-process.c dovecot-1.2.4/src/master/child-process.c
--- dovecot-1.2.4.orig/src/master/child-process.c	2009-04-28 22:01:59.000000000 +0200
+++ dovecot-1.2.4/src/master/child-process.c	2009-08-29 17:20:49.000000000 +0200
@@ -20,7 +20,8 @@
 	"imap",
 	"pop3",
 	"ssl-build-param",
-	"dict"
+	"dict",
+	"managesieve"
 };
 
 struct hash_table *processes;
@@ -109,6 +110,7 @@
 			return "Out of memory - see login_process_size setting";
 		case PROCESS_TYPE_IMAP:
 		case PROCESS_TYPE_POP3:
+		case PROCESS_TYPE_MANAGESIEVE:
 			return "Out of memory - see mail_process_size setting";
 		case PROCESS_TYPE_UNKNOWN:
 		case PROCESS_TYPE_SSL_PARAM:
@@ -157,6 +159,7 @@
 #endif
 	case PROCESS_TYPE_IMAP:
 	case PROCESS_TYPE_POP3:
+	case PROCESS_TYPE_MANAGESIEVE:
 #ifndef HAVE_PR_SET_DUMPABLE
 		if (!settings_root->defaults->mail_drop_priv_before_exec) {
 			str_append(str, " (core not dumped - set mail_drop_priv_before_exec=yes)");
diff -urN dovecot-1.2.4.orig/src/master/child-process.h dovecot-1.2.4/src/master/child-process.h
--- dovecot-1.2.4.orig/src/master/child-process.h	2009-02-23 19:26:01.000000000 +0100
+++ dovecot-1.2.4/src/master/child-process.h	2009-08-29 17:20:49.000000000 +0200
@@ -10,6 +10,7 @@
 	PROCESS_TYPE_POP3,
 	PROCESS_TYPE_SSL_PARAM,
 	PROCESS_TYPE_DICT,
+	PROCESS_TYPE_MANAGESIEVE,
 
 	PROCESS_TYPE_MAX
 };
diff -urN dovecot-1.2.4.orig/src/master/listener.c dovecot-1.2.4/src/master/listener.c
--- dovecot-1.2.4.orig/src/master/listener.c	2009-06-05 00:28:14.000000000 +0200
+++ dovecot-1.2.4/src/master/listener.c	2009-08-29 17:20:49.000000000 +0200
@@ -130,6 +130,10 @@
 			check_conflicts_set(server->pop3, ip, port,
 					    "pop3", proto);
 		}
+		 if (server->managesieve != NULL) {
+            check_conflicts_set(server->managesieve, ip, port,
+                        "managesieve", proto);
+        }
 	}
 }
 
@@ -230,13 +234,29 @@
 			if (set->protocol == MAIL_PROTOCOL_POP3 &&
 			    strcmp(set->ssl, "no") != 0)
 				ssl_listen = TRUE;
+		} else if (strcasecmp(*proto, "managesieve") == 0) {
+			if (set->protocol == MAIL_PROTOCOL_MANAGESIEVE)
+				nonssl_listen = TRUE;
 		}
 	}
 
 	if (!nonssl_listen)
 		listener_close_fds(&set->listens);
 	else {
-		default_port = set->protocol == MAIL_PROTOCOL_IMAP ? 143 : 110;
+		switch (set->protocol) {
+		case MAIL_PROTOCOL_IMAP:
+			default_port = 143;
+			break;
+		case MAIL_PROTOCOL_POP3:
+			default_port = 110;
+			break;
+		case MAIL_PROTOCOL_MANAGESIEVE:
+			default_port = 2000;
+			break;
+		default:
+			i_unreached();
+		}
+
 		listener_init("listen", set->listen, default_port,
 			      &set->listens);
 	}
@@ -336,9 +356,11 @@
 		if (old_set != NULL) {
 			listen_copy_old(old_set->imap, server->imap);
 			listen_copy_old(old_set->pop3, server->pop3);
+			listen_copy_old(old_set->managesieve, server->managesieve);
 		}
 		listen_parse_and_close_unneeded(server->imap);
 		listen_parse_and_close_unneeded(server->pop3);
+		listen_parse_and_close_unneeded(server->managesieve);
 
 		if (old_set != NULL)
 			old_set = old_set->next;
@@ -349,6 +371,8 @@
 			listener_listen_missing(server->imap, "imap", retry);
 		if (server->pop3 != NULL)
 			listener_listen_missing(server->pop3, "pop3", retry);
+		if (server->managesieve != NULL)
+			listener_listen_missing(server->managesieve, "managesieve", retry);
 	}
 }
 
@@ -365,5 +389,8 @@
 			listener_close_fds(&server->pop3->listens);
 			listener_close_fds(&server->pop3->ssl_listens);
 		}
+		if (server->managesieve != NULL) {
+			listener_close_fds(&server->managesieve->listens);
+		}
 	}
 }
diff -urN dovecot-1.2.4.orig/src/master/login-process.c dovecot-1.2.4/src/master/login-process.c
--- dovecot-1.2.4.orig/src/master/login-process.c	2009-04-28 22:01:59.000000000 +0200
+++ dovecot-1.2.4/src/master/login-process.c	2009-08-29 17:20:49.000000000 +0200
@@ -72,8 +72,20 @@
 	group = i_new(struct login_group, 1);
 	group->refcount = 1;
 	group->set = set;
-	group->mail_process_type = set->protocol == MAIL_PROTOCOL_IMAP ?
-		PROCESS_TYPE_IMAP : PROCESS_TYPE_POP3;
+
+	switch ( set->protocol ) {
+	case MAIL_PROTOCOL_IMAP:
+		group->mail_process_type = PROCESS_TYPE_IMAP;
+		break;
+	case MAIL_PROTOCOL_POP3:
+		group->mail_process_type = PROCESS_TYPE_POP3;
+		break;
+	case MAIL_PROTOCOL_MANAGESIEVE:
+		group->mail_process_type = PROCESS_TYPE_MANAGESIEVE;
+		break;
+	default:
+		i_unreached();
+	}
 
 	group->next = login_groups;
 	login_groups = group;
@@ -224,6 +236,8 @@
 			login_group_create(server->imap);
 		if (server->pop3 != NULL)
 			login_group_create(server->pop3);
+		if (server->managesieve != NULL)
+			login_group_create(server->managesieve);
 	}
 }
 
@@ -285,6 +299,8 @@
 			protocol = MAIL_PROTOCOL_IMAP;
 		else if (strcmp(proto, "pop3") == 0)
 			protocol = MAIL_PROTOCOL_POP3;
+		else if (strcmp(proto, "managesieve") == 0)
+			protocol = MAIL_PROTOCOL_MANAGESIEVE;
 		else {
 			i_error("login: Unknown protocol '%s'", proto);
 			return FALSE;
@@ -619,7 +635,13 @@
 				    *set->imap_capability != '\0' ?
 				    set->imap_capability :
 				    set->imap_generated_capability, NULL));
+	} else if (group->mail_process_type == PROCESS_TYPE_MANAGESIEVE) {
+		env_put(t_strconcat("CAPABILITY_STRING=",
+			set->managesieve_generated_capability, NULL));
+		env_put(t_strconcat("MANAGESIEVE_IMPLEMENTATION_STRING=",
+					set->managesieve_implementation_string, NULL));
 	}
+
 	if (*set->login_trusted_networks != '\0') {
 		env_put(t_strconcat("TRUSTED_NETWORKS=",
 				    set->login_trusted_networks, NULL));
diff -urN dovecot-1.2.4.orig/src/master/mail-process.c dovecot-1.2.4/src/master/mail-process.c
--- dovecot-1.2.4.orig/src/master/mail-process.c	2009-08-08 01:46:04.000000000 +0200
+++ dovecot-1.2.4/src/master/mail-process.c	2009-08-29 17:20:49.000000000 +0200
@@ -368,6 +368,15 @@
 	/* We care about POP3 UIDL format in all process types */
 	env_put(t_strconcat("POP3_UIDL_FORMAT=", set->pop3_uidl_format, NULL));
 
+	if (set->protocol == MAIL_PROTOCOL_MANAGESIEVE) {
+		env_put(t_strdup_printf("MANAGESIEVE_MAX_LINE_LENGTH=%u",
+				    set->managesieve_max_line_length));
+		env_put(t_strconcat("MANAGESIEVE_LOGOUT_FORMAT=",
+				    set->managesieve_logout_format, NULL));
+		env_put(t_strconcat("MANAGESIEVE_IMPLEMENTATION_STRING=",
+        		    set->managesieve_implementation_string, NULL));
+	}
+
 	if (set->mail_save_crlf)
 		env_put("MAIL_SAVE_CRLF=1");
 	if (set->mmap_disable)
@@ -490,6 +499,8 @@
 			set = server->imap;
 		else if (strcmp(protocol, "pop3") == 0)
 			set = server->pop3;
+		else if (strcmp(protocol, "managesieve") == 0)
+			set = server->managesieve;
 		else
 			i_fatal("Unknown protocol: '%s'", protocol);
 		executable = set->mail_executable;
@@ -589,7 +600,8 @@
 	bool home_given, nfs_check;
 
 	i_assert(process_type == PROCESS_TYPE_IMAP ||
-		 process_type == PROCESS_TYPE_POP3);
+		process_type == PROCESS_TYPE_POP3 || 
+		process_type == PROCESS_TYPE_MANAGESIEVE );
 
 	if (mail_process_count == set->max_mail_processes) {
 		i_error("Maximum number of mail processes exceeded "
@@ -980,6 +992,8 @@
 					   mail_process_destroyed);
 	child_process_set_destroy_callback(PROCESS_TYPE_POP3,
 					   mail_process_destroyed);
+	child_process_set_destroy_callback(PROCESS_TYPE_MANAGESIEVE,
+					   mail_process_destroyed);
 }
 
 void mail_processes_deinit(void)
diff -urN dovecot-1.2.4.orig/src/master/main.c dovecot-1.2.4/src/master/main.c
--- dovecot-1.2.4.orig/src/master/main.c	2009-05-20 23:48:16.000000000 +0200
+++ dovecot-1.2.4/src/master/main.c	2009-08-29 17:20:49.000000000 +0200
@@ -207,6 +207,8 @@
 			return TRUE;
 		if (server->pop3 != NULL && have_stderr_set(server->pop3))
 			return TRUE;
+		if (server->managesieve != NULL && have_stderr_set(server->managesieve))
+			return TRUE;
 
 		server = server->next;
 	}
diff -urN dovecot-1.2.4.orig/src/master/master-settings.c dovecot-1.2.4/src/master/master-settings.c
--- dovecot-1.2.4.orig/src/master/master-settings.c	2009-08-08 01:46:04.000000000 +0200
+++ dovecot-1.2.4/src/master/master-settings.c	2009-08-29 17:20:49.000000000 +0200
@@ -296,6 +296,11 @@
 	MEMBER(dict_db_config) NULL,
 	MEMBER(dict_process_count) 1,
 
+	/* managesieve */
+	MEMBER(managesieve_max_line_length) 65536,
+	MEMBER(managesieve_logout_format) "bytes=%i/%o",
+	MEMBER(managesieve_implementation_string) PACKAGE,
+
 	/* .. */
 };
 
@@ -476,6 +481,8 @@
 			auth->parent->pop3->ssl_verify_client_cert = TRUE;
 		if (auth->parent->imap != NULL)
 			auth->parent->imap->ssl_verify_client_cert = TRUE;
+		if (auth->parent->managesieve != NULL)
+			auth->parent->managesieve->ssl_verify_client_cert = TRUE;
 	}
 
 	for (s = auth->sockets; s != NULL; s = s->next) {
@@ -555,12 +562,21 @@
 		return TRUE;
 	}
 
-	if (set->protocol == MAIL_PROTOCOL_IMAP) {
+	switch ( set->protocol ) {
+	case MAIL_PROTOCOL_IMAP:
 		if (strstr(set->protocols, "imap") == NULL)
 			return FALSE;
-	} else {
+		break;
+	case MAIL_PROTOCOL_POP3:
 		if (strstr(set->protocols, "pop3") == NULL)
 			return FALSE;
+		break;
+	case MAIL_PROTOCOL_MANAGESIEVE:
+		if (strstr(set->protocols, "managesieve") == NULL)
+			return FALSE;
+		break;
+	default:
+		i_unreached();
 	}
 
 	return TRUE;
@@ -655,7 +671,6 @@
 	(void)closedir(dirp);
 }
 
-#ifdef HAVE_MODULES
 static const char *
 get_process_capability(enum process_type ptype, struct settings *set)
 {
@@ -756,6 +771,7 @@
 	return i_strdup(buf);
 }
 
+#ifdef HAVE_MODULES
 static bool get_imap_capability(struct settings *set)
 {
 	static const char *generated_capability = NULL;
@@ -780,6 +796,26 @@
 }
 #endif
 
+static bool get_managesieve_capability(struct settings *set)
+{
+	static const char *generated_capability = NULL;
+
+	if (generated_capability != NULL) {
+		/* See get_imap_capability above.. */
+		set->managesieve_generated_capability =
+			p_strdup(settings_pool, generated_capability);
+		return TRUE;
+	}
+
+	generated_capability = get_process_capability(PROCESS_TYPE_MANAGESIEVE, set);
+	if (generated_capability == NULL)
+		return FALSE;
+
+	set->managesieve_generated_capability =
+		p_strdup(settings_pool, generated_capability);
+	return TRUE;
+}
+
 static bool settings_verify(struct settings *set)
 {
 	const char *dir;
@@ -965,6 +1001,11 @@
 		strstr(set->server->imap->login_executable, " -D");
 	if (p != NULL && p[3] == '\0')
 		return TRUE;
+	p = set->server->managesieve == NULL ? NULL :
+		strstr(set->server->managesieve->login_executable, " -D");
+	if (p != NULL && p[3] == '\0')
+		return TRUE;
+
 	return FALSE;
 }
 
@@ -1016,6 +1057,10 @@
 			return FALSE;
 	}
 #endif
+	if ( set->protocol == MAIL_PROTOCOL_MANAGESIEVE ) {
+		if (!get_managesieve_capability(set))
+			return FALSE;
+	}
 	return TRUE;
 }
 
@@ -1251,6 +1296,15 @@
 			array_append(&ctx->server->lda_settings, &value, 1);
 		}
 
+		if (error == NULL &&
+		    (ctx->protocol == MAIL_PROTOCOL_ANY ||
+		     ctx->protocol == MAIL_PROTOCOL_MANAGESIEVE)) {
+			error = parse_setting_from_defs(settings_pool,
+							setting_defs,
+							ctx->server->managesieve,
+							key, value);
+		}
+
 		if (error == NULL)
 			return NULL;
 
@@ -1309,6 +1363,13 @@
 			array_append(&ctx->server->pop3->plugin_envs,
 				     &value, 1);
 		}
+		if (ctx->protocol == MAIL_PROTOCOL_ANY ||
+		    ctx->protocol == MAIL_PROTOCOL_MANAGESIEVE) {
+			array_append(&ctx->server->managesieve->plugin_envs, &key, 1);
+			array_append(&ctx->server->managesieve->plugin_envs,
+				     &value, 1);
+		}
+
 		return NULL;
 	}
 
@@ -1318,7 +1379,8 @@
 static struct server_settings *
 create_new_server(const char *name,
 		  struct settings *imap_defaults,
-		  struct settings *pop3_defaults)
+		  struct settings *pop3_defaults,
+		  struct settings *managesieve_defaults)
 {
 	struct server_settings *server;
 
@@ -1326,15 +1388,18 @@
 	server->name = p_strdup(settings_pool, name);
 	server->imap = p_new(settings_pool, struct settings, 1);
 	server->pop3 = p_new(settings_pool, struct settings, 1);
+	server->managesieve = p_new(settings_pool, struct settings, 1);
 	server->auth_defaults = default_auth_settings;
 
 	*server->imap = *imap_defaults;
 	*server->pop3 = *pop3_defaults;
+	*server->managesieve = *managesieve_defaults;
 
 	p_array_init(&server->dicts, settings_pool, 4);
 	p_array_init(&server->lda_settings, settings_pool, 12);
 	p_array_init(&server->imap->plugin_envs, settings_pool, 8);
 	p_array_init(&server->pop3->plugin_envs, settings_pool, 8);
+	p_array_init(&server->managesieve->plugin_envs, settings_pool, 8);
 
 	server->imap->server = server;
 	server->imap->protocol = MAIL_PROTOCOL_IMAP;
@@ -1348,6 +1413,12 @@
 	server->pop3->mail_executable = PKG_LIBEXECDIR"/pop3";
 	server->pop3->mail_plugin_dir = MODULEDIR"/pop3";
 
+	server->managesieve->server = server;
+	server->managesieve->protocol = MAIL_PROTOCOL_MANAGESIEVE;
+	server->managesieve->login_executable = PKG_LIBEXECDIR"/managesieve-login";
+	server->managesieve->mail_executable = PKG_LIBEXECDIR"/managesieve";
+	server->managesieve->mail_plugin_dir = MODULEDIR"/managesieve";
+  
 	return server;
 }
 
@@ -1390,8 +1461,8 @@
 
 		ctx->type = SETTINGS_TYPE_SERVER;
 		ctx->server = create_new_server(name, ctx->server->imap,
-						ctx->server->pop3);
-                server = ctx->root;
+						ctx->server->pop3, ctx->server->managesieve);
+		server = ctx->root;
 		while (server->next != NULL)
 			server = server->next;
 		server->next = ctx->server;
@@ -1412,6 +1483,8 @@
 			ctx->protocol = MAIL_PROTOCOL_POP3;
 		else if (strcmp(name, "lda") == 0)
 			ctx->protocol = MAIL_PROTOCOL_LDA;
+		else if (strcmp(name, "managesieve") == 0)
+			ctx->protocol = MAIL_PROTOCOL_MANAGESIEVE;
 		else {
 			*errormsg = "Unknown protocol name";
 			return FALSE;
@@ -1523,6 +1596,8 @@
 			fd_count += server->imap->login_max_processes_count;
 		if (server->pop3 != NULL)
 			fd_count += server->pop3->login_max_processes_count;
+		if (server->managesieve != NULL)
+			fd_count += server->managesieve->login_max_processes_count;
 		fd_count += server->defaults->max_mail_processes;
 	}
 
@@ -1553,7 +1628,7 @@
 	ctx.protocol = MAIL_PROTOCOL_ANY;
 	ctx.server = ctx.root =
 		create_new_server("default",
-				  &default_settings, &default_settings);
+				  &default_settings, &default_settings, &default_settings);
 	ctx.auth = &ctx.server->auth_defaults;
 
 	if (!settings_read(path, NULL, parse_setting, parse_section, &ctx))
@@ -1570,7 +1645,8 @@
 
 	if (!nochecks && !nofixes) {
 		def = settings_is_active(ctx.root->imap) ?
-			ctx.root->imap : ctx.root->pop3;
+			ctx.root->imap : ( settings_is_active(ctx.root->pop3) ?
+				ctx.root->pop3 : ctx.root->managesieve );
 
 		path = t_strconcat(def->base_dir, "/master.pid", NULL);
 		pid_file_check_running(path);
@@ -1579,7 +1655,8 @@
 	prev = NULL;
 	for (server = ctx.root; server != NULL; server = server->next) {
 		if ((*server->imap->protocols == '\0' ||
-		     *server->pop3->protocols == '\0') && !nochecks) {
+		     *server->pop3->protocols == '\0' ||
+		     *server->managesieve->protocols == '\0') && !nochecks) {
 			i_error("protocols: No protocols given "
 				"in configuration file");
 			return FALSE;
@@ -1610,6 +1687,15 @@
 				server->defaults = server->pop3;
 		}
 
+		if (!settings_is_active(server->managesieve) && !nochecks)
+			server->managesieve = NULL;
+		else {
+			if (!settings_fix(server->managesieve, nochecks, nofixes))
+				return FALSE;
+			if (server->defaults == NULL)
+				server->defaults = server->managesieve;
+		}
+
 		if (server->defaults == NULL) {
 			if (prev == NULL)
 				ctx.root = server->next;
@@ -1843,8 +1929,8 @@
 
 void master_settings_dump(struct server_settings *set, bool nondefaults)
 {
-	const void *sets[4];
-	const char *set_names[4];
+	const void *sets[5];
+	const char *set_names[5];
 	unsigned int count;
 
 	sets[0] = &default_settings;
@@ -1863,6 +1949,11 @@
 		sets[count] = set->pop3;
 		set_names[count] = "pop3";
 		count++;
+	}	
+	if (set->managesieve != NULL) {
+		sets[count] = set->managesieve;
+		set_names[count] = "managesieve";
+		count++;
 	}
 	settings_dump(setting_defs, sets, set_names, count, nondefaults, 0);
 	namespace_settings_dump(set->namespaces, nondefaults);
diff -urN dovecot-1.2.4.orig/src/master/master-settings-defs.c dovecot-1.2.4/src/master/master-settings-defs.c
--- dovecot-1.2.4.orig/src/master/master-settings-defs.c	2009-04-28 22:01:59.000000000 +0200
+++ dovecot-1.2.4/src/master/master-settings-defs.c	2009-08-29 17:20:49.000000000 +0200
@@ -130,5 +130,10 @@
 	DEF_STR(dict_db_config),
 	DEF_INT(dict_process_count),
 
+  	/* managesieve */
+  	DEF_INT(managesieve_max_line_length),
+	DEF_STR(managesieve_logout_format),
+  	DEF_STR(managesieve_implementation_string),
+
 	{ 0, NULL, 0 }
 };
diff -urN dovecot-1.2.4.orig/src/master/master-settings.h dovecot-1.2.4/src/master/master-settings.h
--- dovecot-1.2.4.orig/src/master/master-settings.h	2009-08-08 01:46:04.000000000 +0200
+++ dovecot-1.2.4/src/master/master-settings.h	2009-08-29 17:20:49.000000000 +0200
@@ -4,10 +4,11 @@
 #include "network.h"
 
 enum mail_protocol {
-        MAIL_PROTOCOL_ANY,
-        MAIL_PROTOCOL_IMAP,
+	MAIL_PROTOCOL_ANY,
+	MAIL_PROTOCOL_IMAP,
 	MAIL_PROTOCOL_POP3,
-	MAIL_PROTOCOL_LDA
+	MAIL_PROTOCOL_LDA,
+	MAIL_PROTOCOL_MANAGESIEVE
 };
 
 struct listener {
@@ -142,6 +143,11 @@
 	const char *dict_db_config;
 	unsigned int dict_process_count;
 
+	/* managesieve */
+	unsigned int managesieve_max_line_length;
+	const char *managesieve_logout_format;
+	const char *managesieve_implementation_string;
+
 	/* .. */
 	ARRAY_TYPE(listener) listens;
 	ARRAY_TYPE(listener) ssl_listens;
@@ -150,6 +156,7 @@
 	gid_t mail_gid_t, mail_priv_gid_t;
 
 	const char *imap_generated_capability;
+	const char *managesieve_generated_capability;
 
 	ARRAY_DEFINE(plugin_envs, const char *);
 };
@@ -255,9 +262,10 @@
 	struct settings *defaults;
 	struct settings *imap;
 	struct settings *pop3;
+	struct settings *managesieve;
 	struct auth_settings *auths;
 	struct auth_settings auth_defaults;
-        struct namespace_settings *namespaces;
+	struct namespace_settings *namespaces;
 
 	ARRAY_DEFINE(lda_settings, const char *);
 	ARRAY_DEFINE(dicts, const char *);
